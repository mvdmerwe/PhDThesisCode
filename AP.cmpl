%data MixedResources.dat: DataFile, TravelTimeFile, VehiclePropFile, EdgeSet set[3]

parameters:
#Read Data
# q - type index
# u - capability index

#Read Data
temp[ , ] := readcsv(DataFile);
t[,] := readcsv(TravelTimeFile);

vehicleProp[,] := readcsv(VehiclePropFile);

N := temp[1,1];
U := temp[1,3];
numDepots := temp[1,4];
Q := vehicleProp[1,1];



#Define some useful sets
DepotSet := 1..numDepots;
AssetSet := numDepots+1..N-1;
types := 1..Q;

{q in 1..Q:
	P[q] := vehicleProp[2,q];
	d[q] := vehicleProp[3,q];
	{u in 1..U:
		capa[q,u] := vehicleProp[3+u,q];
	}
	{i in DepotSet: 
	stock[i,q] := vehicleProp[U+3+i,q];
	# echo "stock[" + i + "," + q + "]: " + stock[i,q]; 
	}
}

echo "N = " + N  + ",Q = " + Q  + "U = " + U + ",n =" + numDepots;
# echo "P:" + P[1]  + "," + P[2]  + "," + P[3] + "," + P[4];

#Parse imported data
{i in 1..N:
xp[i] := temp[i+1, 2];
yp[i] := temp[i+1, 3];
a[i] := temp[i+1, 4];
S[i] := temp[i+1, 5];
O[i] := temp[i+1, 6];
C[i] := temp[i+1, 7];
}

{ i in AssetSet,u in 1..U:
r[i,u] := temp[i+1,7+u];
#echo "r[" + i + "," + u + "]: " + r[i,u]; 
}

#Display read  data
# {i in DepotSet:
# echo i + "- depot x:" + xp[i] + " y:" + yp[i] + " " + a[i] + " " + S[i] + " " + O[i] + " " + C[i] ; 
# }
# {i in AssetSet:
# echo i + "- asset x:" + xp[i] + " y:" + yp[i] + " " + a[i] + " " + S[i] + " " + O[i] + " " + C[i] ; 
# }
# echo N + "- sink x:" + xp[N] + " y:" + yp[N] + " " + a[N] + " " + S[N] + " " + O[N] + " " + C[N] ; 

#Defining a number of constants
Tmax := temp[2,7];
M := max(C[]) + max(t[,]) + max(a[]) - min(O[]);
N1 := N-1; 


variables:
y[AssetSet]:binary;
s[1..N]:real;		#s[i]
x[EdgeSet]:integer; #x[i,j,q]
z[EdgeSet]:binary;  #z[i,j]

objectives:

sum{i in AssetSet: S[i]*y[i]} -> max;  #(1)

constraints:

{ k in DepotSet, qone in 1..Q:
start: sum{ [i,j,qtwo] in EdgeSet : sum{i = k && qtwo = qone : x[i,j,qtwo] | default : 0} } = stock[k,qone]; #(2)
}

{k in AssetSet, qone in 1..Q:
connectivity: sum{[i,j,qtwo] in EdgeSet : sum{j = k && qtwo = qone  : x[i,k,qtwo] | default : 0} } = sum{[i,j,qtwo] in EdgeSet : sum{i = k && qtwo = qone : x[k,j,qtwo] | default : 0} } ; # (4)
}

#Protection constraints
{k in AssetSet, u in 1..U:
protection: sum{ [i,j,q] in EdgeSet: sum{ j = k : x[i,k,q] * capa[q,u] | default : 0}}   >= r[k,u] * y[k] ; #(5)
}

{ [i,j,q] in EdgeSet:
x[i,j,q] <=  P[q] * z[i,j,q]; #(6)
}

{ [i,j,q] in EdgeSet:
timingConstraints: s[i] + d[q] * t[i,j] + a[i] - s[j] <= M - M * z[i,j,q]; #(7)
}

{ i in 1..N:
open: O[i] <= s[i]; #(8)
close: s[i] <= C[i]; #(9)
}

{[i,j,q] in EdgeSet:
varBot: x[i,j,q] >= 0;
varTop: x[i,j,q] <= P[q];
}

{depot in DepotSet:
s[depot] = 0;
}
s[N] = Tmax;




